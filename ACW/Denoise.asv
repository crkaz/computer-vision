function imP = Denoise(im)
    oim = im;
    % Apply median filter; this is a generally good filter for many images.     
    % (applying to each channel preserves the original colour).     
    [c1,c2,c3] = imsplit(im);
    c1 = medfilt2(c1);
    c2 = medfilt2(c2);
    c3 = medfilt2(c3);
    im = cat(3, c1,c2,c3);
    
    % Apply a mean filter; this improves images with gaussian and speckle
    % noise. Whilst some detail is lost, segmentation improves as a result.

        im = MeanFilter(im, 3);
%     else
%         disp("didn't apply mean filter to salt and pepper im");
%     end
    
    % See MyDenoise function.
    im = MyDenoise(im);
    
    imP = im;
end

function imP = MyDenoise(im)
    oim = im;
    
    % Create an arbritarily denoised version 
    filtered = oim;
    [f1,f2,f3] = imsplit(filtered);
    f1 = medfilt2(f1);
    f2 = medfilt2(f2);
    f3 = medfilt2(f3);
    filtered = cat(3, f1, f2, f3);

    % Get diff between filtered image and original
    diffMask = filtered - oim;

    % Threshold pixels that are significantly different and assume them ...
    % ... to be noise.
    noiseThresh = 30;
    [n1,n2,n3] = imsplit(diffMask);
    n1 = n1 > noiseThresh;
    n2 = n2 > noiseThresh;
    n3 = n3 > noiseThresh;

    % Replace noisy pixels with filtered pixels. Conditional filtering ...
    % ... imroves detail retention.
    [c1,c2,c3] = imsplit(oim);
    c1(n1) = f1(n1);
    c2(n2) = f2(n2);
    c3(n3) = f3(n3);
    denoised = cat(3, c1,c2,c3);

    % Apply mean filter for additional smoothing. Helps segmentation.
    
    [c1,c2,c3] = imsplit(denoised);
    c1 = MeanFilter(c1, 3);
    c2 = MeanFilter(c2, 3);
    c3 = MeanFilter(c3, 3);
    denoised = cat(3, c1,c2,c3);

    % Sharpen the image.
%     denoised = imsharpen(denoised);
    
    imP = denoised;
end